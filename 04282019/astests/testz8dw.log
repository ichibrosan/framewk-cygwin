Start of pass one

src:         title   $Id: testz8dw.asm,v 1.3 2011/03/25 09:01:21 doug Exp $
label[0] g_szOpcode[5] g_szParms[54] comments[0]
Processing TITLE directive

src:         subttl  COPR 2011 Douglas Goodall
label[0] g_szOpcode[6] g_szParms[25] comments[0]
Processing SUBTTL directive

src: ;
label[0] g_szOpcode[0] g_szParms[0] comments[1]

src: ; $Log: testz8dw.asm,v $
label[0] g_szOpcode[0] g_szParms[0] comments[24]

src: ; Revision 1.3  2011/03/25 09:01:21  doug
label[0] g_szOpcode[0] g_szParms[0] comments[41]

src: ; *** empty log message ***
label[0] g_szOpcode[0] g_szParms[0] comments[27]

src: ;
label[0] g_szOpcode[0] g_szParms[0] comments[1]

src: ; Revision 1.2  2011/03/25 08:48:52  doug
label[0] g_szOpcode[0] g_szParms[0] comments[41]

src: ; *** empty log message ***
label[0] g_szOpcode[0] g_szParms[0] comments[27]

src: ;
label[0] g_szOpcode[0] g_szParms[0] comments[1]

src: ; Revision 1.1  2011/03/25 08:26:35  doug
label[0] g_szOpcode[0] g_szParms[0] comments[41]

src: ; Initial revision
label[0] g_szOpcode[0] g_szParms[0] comments[18]

src: ;
label[0] g_szOpcode[0] g_szParms[0] comments[1]

src: ;
label[0] g_szOpcode[0] g_szParms[0] comments[1]

src:         include gplstuff.inc
label[0] g_szOpcode[7] g_szParms[12] comments[0]
Processing INCLUDE directive

src: ; ------------------------------------
label[0] g_szOpcode[0] g_szParms[0] comments[38]

src: ; This file is part of "Vintage Modern 
label[0] g_szOpcode[0] g_szParms[0] comments[39]

src: ; Assembler Plus Tools (VMAPT)".
label[0] g_szOpcode[0] g_szParms[0] comments[32]

src: ;
label[0] g_szOpcode[0] g_szParms[0] comments[1]

src: ; VMAPT is free software: you can 
label[0] g_szOpcode[0] g_szParms[0] comments[34]

src: ; redistribute it and/or modify it under 
label[0] g_szOpcode[0] g_szParms[0] comments[41]

src: ; the terms of  the GNU General Public 
label[0] g_szOpcode[0] g_szParms[0] comments[39]

src: ; License  as published by the Free
label[0] g_szOpcode[0] g_szParms[0] comments[35]

src: ; Software  Foundation, either version 3
label[0] g_szOpcode[0] g_szParms[0] comments[40]

src: ; of the License, or (at your option)  
label[0] g_szOpcode[0] g_szParms[0] comments[39]

src: ; any later version.
label[0] g_szOpcode[0] g_szParms[0] comments[20]

src: ;
label[0] g_szOpcode[0] g_szParms[0] comments[1]

src: ; VMAPT is distributed in the hope that it 
label[0] g_szOpcode[0] g_szParms[0] comments[43]

src: ; will be useful, but WITHOUT ANY WARRANTY;
label[0] g_szOpcode[0] g_szParms[0] comments[43]

src: ; without even the implied warranty of   
label[0] g_szOpcode[0] g_szParms[0] comments[41]

src: ; MERCHANTABILITY or FITNESS FOR A 
label[0] g_szOpcode[0] g_szParms[0] comments[35]

src: ; PARTICULAR PURPOSE. See the GNU General 
label[0] g_szOpcode[0] g_szParms[0] comments[42]

src: ; Public License for more details.
label[0] g_szOpcode[0] g_szParms[0] comments[34]

src: ;
label[0] g_szOpcode[0] g_szParms[0] comments[1]

src: ; You  should have received a copy of the 
label[0] g_szOpcode[0] g_szParms[0] comments[42]

src: ; GNU General Public License along with 
label[0] g_szOpcode[0] g_szParms[0] comments[40]

src: ; VMAPT. If not,
label[0] g_szOpcode[0] g_szParms[0] comments[16]

src: ; see <http://www.gnu.org/licenses/>.
label[0] g_szOpcode[0] g_szParms[0] comments[37]

src: ; ----------------------------------------
label[0] g_szOpcode[0] g_szParms[0] comments[42]

src: 
label[0] g_szOpcode[0] g_szParms[0] comments[0]

src: 
label[0] g_szOpcode[0] g_szParms[0] comments[0]

src: 
label[0] g_szOpcode[0] g_szParms[0] comments[0]

src: 
label[0] g_szOpcode[0] g_szParms[0] comments[0]

src: 	proc	z80
label[0] g_szOpcode[4] g_szParms[3] comments[0]
Processing PROC directive

src: 	include	assemble.inc
label[0] g_szOpcode[7] g_szParms[12] comments[0]
Processing INCLUDE directive

src: ;
label[0] g_szOpcode[0] g_szParms[0] comments[1]

src: ; $Log: assemble.inc,v $
label[0] g_szOpcode[0] g_szParms[0] comments[24]

src: ; Revision 1.1  2011/03/25 08:43:19  doug
label[0] g_szOpcode[0] g_szParms[0] comments[41]

src: ; Initial revision
label[0] g_szOpcode[0] g_szParms[0] comments[18]

src: ;
label[0] g_szOpcode[0] g_szParms[0] comments[1]

src: ;
label[0] g_szOpcode[0] g_szParms[0] comments[1]

src: TRUE	equ8	1
label[4] g_szOpcode[4] g_szParms[1] comments[0]
Processing EQU8 directive

src: FALSE	equ8	0
label[5] g_szOpcode[4] g_szParms[1] comments[0]
Processing EQU8 directive

src: ;;;;;;;;;;;;;;;;;;;;;;
label[0] g_szOpcode[0] g_szParms[0] comments[22]

src: ; eof - assemble.inc ;
label[0] g_szOpcode[0] g_szParms[0] comments[22]

src: ;;;;;;;;;;;;;;;;;;;;;; 
label[0] g_szOpcode[0] g_szParms[0] comments[23]

src: 
label[0] g_szOpcode[0] g_szParms[0] comments[0]

src: ;	savesyms	TRUE
label[0] g_szOpcode[0] g_szParms[0] comments[15]

src: 
label[0] g_szOpcode[0] g_szParms[0] comments[0]

src: figrel	equ	1
label[6] g_szOpcode[3] g_szParms[1] comments[0]
Processing EQU directive
result from resolvep64(g_szParms) was 0X00000000000000001

src: figrev	equ	1
label[6] g_szOpcode[3] g_szParms[1] comments[0]
Processing EQU directive
result from resolvep64(g_szParms) was 0X00000000000000001

src: usrver	equ	0
label[6] g_szOpcode[3] g_szParms[1] comments[0]
Processing EQU directive
result from resolvep64(g_szParms) was 0X00000000000000000

src: 
label[0] g_szOpcode[0] g_szParms[0] comments[0]

src: 	radix	hex
label[0] g_szOpcode[5] g_szParms[3] comments[0]
Processing RADIX directive

src: abl	equ	20
label[3] g_szOpcode[3] g_szParms[2] comments[0]
Processing EQU directive
result from resolvep64(g_szParms) was 0X00000000000000020

src: acr	equ	0D
label[3] g_szOpcode[3] g_szParms[2] comments[0]
Processing EQU directive
result from resolvep64(g_szParms) was 0X0000000000000000D

src: adot	equ	2E
label[4] g_szOpcode[3] g_szParms[2] comments[0]
Processing EQU directive
result from resolvep64(g_szParms) was 0X0000000000000002E

src: bell	equ	07
label[4] g_szOpcode[3] g_szParms[2] comments[0]
Processing EQU directive
result from resolvep64(g_szParms) was 0X00000000000000007

src: bsin	equ	7F
label[4] g_szOpcode[3] g_szParms[2] comments[0]
Processing EQU directive
result from resolvep64(g_szParms) was 0X0000000000000007F

src: bsout	equ	08
label[5] g_szOpcode[3] g_szParms[2] comments[0]
Processing EQU directive
result from resolvep64(g_szParms) was 0X00000000000000008

src: dle	equ	10
label[3] g_szOpcode[3] g_szParms[2] comments[0]
Processing EQU directive
result from resolvep64(g_szParms) was 0X00000000000000010

src: lf	equ	0A
label[2] g_szOpcode[3] g_szParms[2] comments[0]
Processing EQU directive
result from resolvep64(g_szParms) was 0X0000000000000000A

src: ff	equ	0C
label[2] g_szOpcode[3] g_szParms[2] comments[0]
Processing EQU directive
result from resolvep64(g_szParms) was 0X0000000000000000C

src: 
label[0] g_szOpcode[0] g_szParms[0] comments[0]

src: em	equ	4000
label[2] g_szOpcode[3] g_szParms[4] comments[0]
Processing EQU directive
result from resolvep64(g_szParms) was 0X00000000000004000

src: nscr	equ	1
label[4] g_szOpcode[3] g_szParms[1] comments[0]
Processing EQU directive
result from resolvep64(g_szParms) was 0X00000000000000001

src: 	radix	decimal
label[0] g_szOpcode[5] g_szParms[7] comments[0]
Processing RADIX directive

src: kbbuf	equ	128
label[5] g_szOpcode[3] g_szParms[3] comments[0]
Processing EQU directive
result from resolvep64(g_szParms) was 0X00000000000000080

src: 	radix	hex
label[0] g_szOpcode[5] g_szParms[3] comments[0]
Processing RADIX directive

src: us	equ	40
label[2] g_szOpcode[3] g_szParms[2] comments[0]
Processing EQU directive
result from resolvep64(g_szParms) was 0X00000000000000040

src: rts	equ	0A0
label[3] g_szOpcode[3] g_szParms[3] comments[0]
Processing EQU directive
result from resolvep64(g_szParms) was 0X000000000000000A0

src: 
label[0] g_szOpcode[0] g_szParms[0] comments[0]

src: 
label[0] g_szOpcode[0] g_szParms[0] comments[0]

src: _co	equ	kbbuf+4
label[3] g_szOpcode[3] g_szParms[7] comments[0]
Processing EQU directive
szinput token is k
case 1 starting
szinput token is b
szinput token is b
szinput token is u
szinput token is f
szinput token is +
szinput token is 4
case 1 starting
case 1 found numeric 4
case 1 numeric not $
case 1 setting state 3 to continue numeric
szinput token is  
case 3 starting, c is  
case 3 whitespace detected
case 3 setting state 1 again
result from resolvep64(g_szParms) was 0X00000000000000084

src: 
label[0] g_szOpcode[0] g_szParms[0] comments[0]

src: 	debug	TRUE
label[0] g_szOpcode[5] g_szParms[4] comments[0]
Processing DEBUG directive

src: nbuf	equ	nscr*400/kbbuf
label[4] g_szOpcode[3] g_szParms[14] comments[0]
Processing EQU directive
szinput token is n
case 1 starting
szinput token is s
szinput token is c
szinput token is r
szinput token is *
szinput token is 4
case 1 starting
case 1 found numeric 4
case 1 numeric not $
case 1 setting state 3 to continue numeric
szinput token is 0
case 3 starting, c is 0
szinput token is 0
case 3 starting, c is 0
szinput token is /
case 3 starting, c is /
case 3 detected operator /
case 3 setting state 1 again 
szinput token is k
case 1 starting
szinput token is b
szinput token is b
szinput token is u
szinput token is f
szinput token is  
result from resolvep64(g_szParms) was 0X00000000000000008

src: 	debug	FALSE
label[0] g_szOpcode[5] g_szParms[5] comments[0]
Processing DEBUG directive

src: 
label[0] g_szOpcode[0] g_szParms[0] comments[0]

src: buf1	equ	em-_co*nbuf
label[4] g_szOpcode[3] g_szParms[11] comments[0]
Processing EQU directive
szinput token is e
case 1 starting
szinput token is m
szinput token is -
szinput token is _
case 1 starting
szinput token is c
case 1 starting
szinput token is o
szinput token is *
szinput token is n
case 1 starting
szinput token is b
szinput token is u
szinput token is f
szinput token is  
result from resolvep64(g_szParms) was 0X00000000000003BE0

src: initr0	equ	buf1-us
label[6] g_szOpcode[3] g_szParms[7] comments[0]
Processing EQU directive
szinput token is b
case 1 starting
szinput token is u
szinput token is f
szinput token is 1
szinput token is -
szinput token is u
case 1 starting
szinput token is s
szinput token is  
result from resolvep64(g_szParms) was 0X00000000000003BA0

src: inits0	equ	initr0-rts
label[6] g_szOpcode[3] g_szParms[10] comments[0]
Processing EQU directive
szinput token is i
case 1 starting
szinput token is n
szinput token is i
szinput token is t
szinput token is r
szinput token is 0
szinput token is -
szinput token is r
case 1 starting
szinput token is t
szinput token is s
szinput token is  
result from resolvep64(g_szParms) was 0X00000000000003B00

src: 
label[0] g_szOpcode[0] g_szParms[0] comments[0]

src: ; this is debug code
label[0] g_szOpcode[0] g_szParms[0] comments[20]

src: 	dw	_co
label[0] g_szOpcode[2] g_szParms[3] comments[0]
Processing Z80 DW directive

src: 	dw	nbuf
label[0] g_szOpcode[2] g_szParms[4] comments[0]
Processing Z80 DW directive

src: 	dw	buf1
label[0] g_szOpcode[2] g_szParms[4] comments[0]
Processing Z80 DW directive

src: 	dw	initr0
label[0] g_szOpcode[2] g_szParms[6] comments[0]
Processing Z80 DW directive

src: 	dw	inits0
label[0] g_szOpcode[2] g_szParms[6] comments[0]
Processing Z80 DW directive

src: ; end of debug code
label[0] g_szOpcode[0] g_szParms[0] comments[19]

src: 
label[0] g_szOpcode[0] g_szParms[0] comments[0]

src: 	end
label[0] g_szOpcode[3] g_szParms[0] comments[0]
Processing END directive
End of pass one
Start of pass two

src:         title   $Id: testz8dw.asm,v 1.3 2011/03/25 09:01:21 doug Exp $
label[0] g_szOpcode[5] g_szParms[54] comments[0]
Processing TITLE directive

src:         subttl  COPR 2011 Douglas Goodall
label[0] g_szOpcode[6] g_szParms[25] comments[0]
Processing SUBTTL directive

src: ;
label[0] g_szOpcode[0] g_szParms[0] comments[1]

src: ; $Log: testz8dw.asm,v $
label[0] g_szOpcode[0] g_szParms[0] comments[24]

src: ; Revision 1.3  2011/03/25 09:01:21  doug
label[0] g_szOpcode[0] g_szParms[0] comments[41]

src: ; *** empty log message ***
label[0] g_szOpcode[0] g_szParms[0] comments[27]

src: ;
label[0] g_szOpcode[0] g_szParms[0] comments[1]

src: ; Revision 1.2  2011/03/25 08:48:52  doug
label[0] g_szOpcode[0] g_szParms[0] comments[41]

src: ; *** empty log message ***
label[0] g_szOpcode[0] g_szParms[0] comments[27]

src: ;
label[0] g_szOpcode[0] g_szParms[0] comments[1]

src: ; Revision 1.1  2011/03/25 08:26:35  doug
label[0] g_szOpcode[0] g_szParms[0] comments[41]

src: ; Initial revision
label[0] g_szOpcode[0] g_szParms[0] comments[18]

src: ;
label[0] g_szOpcode[0] g_szParms[0] comments[1]

src: ;
label[0] g_szOpcode[0] g_szParms[0] comments[1]

src:         include gplstuff.inc
label[0] g_szOpcode[7] g_szParms[12] comments[0]
Processing INCLUDE directive

src: ; ------------------------------------
label[0] g_szOpcode[0] g_szParms[0] comments[38]

src: ; This file is part of "Vintage Modern 
label[0] g_szOpcode[0] g_szParms[0] comments[39]

src: ; Assembler Plus Tools (VMAPT)".
label[0] g_szOpcode[0] g_szParms[0] comments[32]

src: ;
label[0] g_szOpcode[0] g_szParms[0] comments[1]

src: ; VMAPT is free software: you can 
label[0] g_szOpcode[0] g_szParms[0] comments[34]

src: ; redistribute it and/or modify it under 
label[0] g_szOpcode[0] g_szParms[0] comments[41]

src: ; the terms of  the GNU General Public 
label[0] g_szOpcode[0] g_szParms[0] comments[39]

src: ; License  as published by the Free
label[0] g_szOpcode[0] g_szParms[0] comments[35]

src: ; Software  Foundation, either version 3
label[0] g_szOpcode[0] g_szParms[0] comments[40]

src: ; of the License, or (at your option)  
label[0] g_szOpcode[0] g_szParms[0] comments[39]

src: ; any later version.
label[0] g_szOpcode[0] g_szParms[0] comments[20]

src: ;
label[0] g_szOpcode[0] g_szParms[0] comments[1]

src: ; VMAPT is distributed in the hope that it 
label[0] g_szOpcode[0] g_szParms[0] comments[43]

src: ; will be useful, but WITHOUT ANY WARRANTY;
label[0] g_szOpcode[0] g_szParms[0] comments[43]

src: ; without even the implied warranty of   
label[0] g_szOpcode[0] g_szParms[0] comments[41]

src: ; MERCHANTABILITY or FITNESS FOR A 
label[0] g_szOpcode[0] g_szParms[0] comments[35]

src: ; PARTICULAR PURPOSE. See the GNU General 
label[0] g_szOpcode[0] g_szParms[0] comments[42]

src: ; Public License for more details.
label[0] g_szOpcode[0] g_szParms[0] comments[34]

src: ;
label[0] g_szOpcode[0] g_szParms[0] comments[1]

src: ; You  should have received a copy of the 
label[0] g_szOpcode[0] g_szParms[0] comments[42]

src: ; GNU General Public License along with 
label[0] g_szOpcode[0] g_szParms[0] comments[40]

src: ; VMAPT. If not,
label[0] g_szOpcode[0] g_szParms[0] comments[16]

src: ; see <http://www.gnu.org/licenses/>.
label[0] g_szOpcode[0] g_szParms[0] comments[37]

src: ; ----------------------------------------
label[0] g_szOpcode[0] g_szParms[0] comments[42]

src: 
label[0] g_szOpcode[0] g_szParms[0] comments[0]

src: 
label[0] g_szOpcode[0] g_szParms[0] comments[0]

src: 
label[0] g_szOpcode[0] g_szParms[0] comments[0]

src: 
label[0] g_szOpcode[0] g_szParms[0] comments[0]

src: 	proc	z80
label[0] g_szOpcode[4] g_szParms[3] comments[0]
Processing PROC directive

src: 	include	assemble.inc
label[0] g_szOpcode[7] g_szParms[12] comments[0]
Processing INCLUDE directive

src: ;
label[0] g_szOpcode[0] g_szParms[0] comments[1]

src: ; $Log: assemble.inc,v $
label[0] g_szOpcode[0] g_szParms[0] comments[24]

src: ; Revision 1.1  2011/03/25 08:43:19  doug
label[0] g_szOpcode[0] g_szParms[0] comments[41]

src: ; Initial revision
label[0] g_szOpcode[0] g_szParms[0] comments[18]

src: ;
label[0] g_szOpcode[0] g_szParms[0] comments[1]

src: ;
label[0] g_szOpcode[0] g_szParms[0] comments[1]

src: TRUE	equ8	1
label[4] g_szOpcode[4] g_szParms[1] comments[0]
Processing EQU8 directive

src: FALSE	equ8	0
label[5] g_szOpcode[4] g_szParms[1] comments[0]
Processing EQU8 directive

src: ;;;;;;;;;;;;;;;;;;;;;;
label[0] g_szOpcode[0] g_szParms[0] comments[22]

src: ; eof - assemble.inc ;
label[0] g_szOpcode[0] g_szParms[0] comments[22]

src: ;;;;;;;;;;;;;;;;;;;;;; 
label[0] g_szOpcode[0] g_szParms[0] comments[23]

src: 
label[0] g_szOpcode[0] g_szParms[0] comments[0]

src: ;	savesyms	TRUE
label[0] g_szOpcode[0] g_szParms[0] comments[15]

src: 
label[0] g_szOpcode[0] g_szParms[0] comments[0]

src: figrel	equ	1
label[6] g_szOpcode[3] g_szParms[1] comments[0]
Processing EQU directive
result from resolvep64(g_szParms) was 0X00000000000000001

src: figrev	equ	1
label[6] g_szOpcode[3] g_szParms[1] comments[0]
Processing EQU directive
result from resolvep64(g_szParms) was 0X00000000000000001

src: usrver	equ	0
label[6] g_szOpcode[3] g_szParms[1] comments[0]
Processing EQU directive
result from resolvep64(g_szParms) was 0X00000000000000000

src: 
label[0] g_szOpcode[0] g_szParms[0] comments[0]

src: 	radix	hex
label[0] g_szOpcode[5] g_szParms[3] comments[0]
Processing RADIX directive

src: abl	equ	20
label[3] g_szOpcode[3] g_szParms[2] comments[0]
Processing EQU directive
result from resolvep64(g_szParms) was 0X00000000000000020

src: acr	equ	0D
label[3] g_szOpcode[3] g_szParms[2] comments[0]
Processing EQU directive
result from resolvep64(g_szParms) was 0X0000000000000000D

src: adot	equ	2E
label[4] g_szOpcode[3] g_szParms[2] comments[0]
Processing EQU directive
result from resolvep64(g_szParms) was 0X0000000000000002E

src: bell	equ	07
label[4] g_szOpcode[3] g_szParms[2] comments[0]
Processing EQU directive
result from resolvep64(g_szParms) was 0X00000000000000007

src: bsin	equ	7F
label[4] g_szOpcode[3] g_szParms[2] comments[0]
Processing EQU directive
result from resolvep64(g_szParms) was 0X0000000000000007F

src: bsout	equ	08
label[5] g_szOpcode[3] g_szParms[2] comments[0]
Processing EQU directive
result from resolvep64(g_szParms) was 0X00000000000000008

src: dle	equ	10
label[3] g_szOpcode[3] g_szParms[2] comments[0]
Processing EQU directive
result from resolvep64(g_szParms) was 0X00000000000000010

src: lf	equ	0A
label[2] g_szOpcode[3] g_szParms[2] comments[0]
Processing EQU directive
result from resolvep64(g_szParms) was 0X0000000000000000A

src: ff	equ	0C
label[2] g_szOpcode[3] g_szParms[2] comments[0]
Processing EQU directive
result from resolvep64(g_szParms) was 0X0000000000000000C

src: 
label[0] g_szOpcode[0] g_szParms[0] comments[0]

src: em	equ	4000
label[2] g_szOpcode[3] g_szParms[4] comments[0]
Processing EQU directive
result from resolvep64(g_szParms) was 0X00000000000004000

src: nscr	equ	1
label[4] g_szOpcode[3] g_szParms[1] comments[0]
Processing EQU directive
result from resolvep64(g_szParms) was 0X00000000000000001

src: 	radix	decimal
label[0] g_szOpcode[5] g_szParms[7] comments[0]
Processing RADIX directive

src: kbbuf	equ	128
label[5] g_szOpcode[3] g_szParms[3] comments[0]
Processing EQU directive
result from resolvep64(g_szParms) was 0X00000000000000080

src: 	radix	hex
label[0] g_szOpcode[5] g_szParms[3] comments[0]
Processing RADIX directive

src: us	equ	40
label[2] g_szOpcode[3] g_szParms[2] comments[0]
Processing EQU directive
result from resolvep64(g_szParms) was 0X00000000000000040

src: rts	equ	0A0
label[3] g_szOpcode[3] g_szParms[3] comments[0]
Processing EQU directive
result from resolvep64(g_szParms) was 0X000000000000000A0

src: 
label[0] g_szOpcode[0] g_szParms[0] comments[0]

src: 
label[0] g_szOpcode[0] g_szParms[0] comments[0]

src: _co	equ	kbbuf+4
label[3] g_szOpcode[3] g_szParms[7] comments[0]
Processing EQU directive
szinput token is k
case 1 starting
szinput token is b
szinput token is b
szinput token is u
szinput token is f
szinput token is +
szinput token is 4
case 1 starting
case 1 found numeric 4
case 1 numeric not $
case 1 setting state 3 to continue numeric
szinput token is  
case 3 starting, c is  
case 3 whitespace detected
case 3 setting state 1 again
result from resolvep64(g_szParms) was 0X00000000000000084

src: 
label[0] g_szOpcode[0] g_szParms[0] comments[0]

src: 	debug	TRUE
label[0] g_szOpcode[5] g_szParms[4] comments[0]
Processing DEBUG directive

src: nbuf	equ	nscr*400/kbbuf
label[4] g_szOpcode[3] g_szParms[14] comments[0]
Processing EQU directive
szinput token is n
case 1 starting
szinput token is s
szinput token is c
szinput token is r
szinput token is *
szinput token is 4
case 1 starting
case 1 found numeric 4
case 1 numeric not $
case 1 setting state 3 to continue numeric
szinput token is 0
case 3 starting, c is 0
szinput token is 0
case 3 starting, c is 0
szinput token is /
case 3 starting, c is /
case 3 detected operator /
case 3 setting state 1 again 
szinput token is k
case 1 starting
szinput token is b
szinput token is b
szinput token is u
szinput token is f
szinput token is  
result from resolvep64(g_szParms) was 0X00000000000000008

src: 	debug	FALSE
label[0] g_szOpcode[5] g_szParms[5] comments[0]
Processing DEBUG directive

src: 
label[0] g_szOpcode[0] g_szParms[0] comments[0]

src: buf1	equ	em-_co*nbuf
label[4] g_szOpcode[3] g_szParms[11] comments[0]
Processing EQU directive
szinput token is e
case 1 starting
szinput token is m
szinput token is -
szinput token is _
case 1 starting
szinput token is c
case 1 starting
szinput token is o
szinput token is *
szinput token is n
case 1 starting
szinput token is b
szinput token is u
szinput token is f
szinput token is  
result from resolvep64(g_szParms) was 0X00000000000003BE0

src: initr0	equ	buf1-us
label[6] g_szOpcode[3] g_szParms[7] comments[0]
Processing EQU directive
szinput token is b
case 1 starting
szinput token is u
szinput token is f
szinput token is 1
szinput token is -
szinput token is u
case 1 starting
szinput token is s
szinput token is  
result from resolvep64(g_szParms) was 0X00000000000003BA0

src: inits0	equ	initr0-rts
label[6] g_szOpcode[3] g_szParms[10] comments[0]
Processing EQU directive
szinput token is i
case 1 starting
szinput token is n
szinput token is i
szinput token is t
szinput token is r
szinput token is 0
szinput token is -
szinput token is r
case 1 starting
szinput token is t
szinput token is s
szinput token is  
result from resolvep64(g_szParms) was 0X00000000000003B00

src: 
label[0] g_szOpcode[0] g_szParms[0] comments[0]

src: ; this is debug code
label[0] g_szOpcode[0] g_szParms[0] comments[20]

src: 	dw	_co
label[0] g_szOpcode[2] g_szParms[3] comments[0]
Processing Z80 DW directive
hexout(pc=0000,count=2,offset=0); called

src: 	dw	nbuf
label[0] g_szOpcode[2] g_szParms[4] comments[0]
Processing Z80 DW directive
hexout(pc=0002,count=2,offset=0); called

src: 	dw	buf1
label[0] g_szOpcode[2] g_szParms[4] comments[0]
Processing Z80 DW directive
hexout(pc=0004,count=2,offset=0); called

src: 	dw	initr0
label[0] g_szOpcode[2] g_szParms[6] comments[0]
Processing Z80 DW directive
hexout(pc=0006,count=2,offset=0); called

src: 	dw	inits0
label[0] g_szOpcode[2] g_szParms[6] comments[0]
Processing Z80 DW directive
hexout(pc=0008,count=2,offset=0); called

src: ; end of debug code
label[0] g_szOpcode[0] g_szParms[0] comments[19]

src: 
label[0] g_szOpcode[0] g_szParms[0] comments[0]

src: 	end
label[0] g_szOpcode[3] g_szParms[0] comments[0]
Processing END directive
End of pass two
