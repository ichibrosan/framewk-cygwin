0001   0000             ;***********************************
0002   0000             ;*	Z80 Test Prototype
0003   0000             ;*	LOAD MONITOR FROM ROM INTO RAM AND EXECUTE Program
0004   0000             ;*	Andrew Lynch
0005   0000             ;*	lynchaj@yahoo.com
0006   0000             ;*	15 Feb 2007
0007   0000             ;***********************************
0008   0000             
0009   0000             
0010   0000             ;********************* CONSTANTS ****************************************
0011   0000             
0012   0000             RAMTOP:		.EQU	$FFFF	; HIGHEST ADDRESSABLE MEMORY LOCATION
0013   0000             MONSTART:	.EQU	$F800	; START OF 6116 SRAM 2KB x 8 RAM F800H-FFFFH
0014   0000             RAMBOTTOM:	.EQU	$8000	; Beginning of Upper 32K RAM page
0015   0000             END:		.EQU	$FF	; Mark END OF TEXT
0016   0000             CR:		.EQU	0DH	; ASCII carriage return character
0017   0000             LF:		.EQU	0AH	; ASCII line feed character
0018   0000             ESC:		.EQU	1BH	; ASCII escape character
0019   0000             
0020   0000             ROMSTART_MON:	.EQU	$0100	; Where the Monitor is stored in ROM
0021   0000             RAMTARG_MON:	.EQU	$F800	; Where the Monitor starts in RAM (entry point)
0022   0000             MOVSIZ_MON:	.EQU	$0800	; Monitor is 2KB in length
0023   0000             
0024   0000             ROMSTART_CPM:	.EQU	$0900	; Where the CCP+BDOS+BIOS is stored in ROM
0025   0000             RAMTARG_CPM:	.EQU	$D400	; Where the CCP+BDOS+BIOS starts in RAM (entry point)
0026   0000             MOVSIZ_CPM:	.EQU	$2100	; CCP, BDOS, + BIOS is 6-7KB in length $1EFF
0027   0000             
0028   0000             Monitor_Entry	.EQU	$F860	; Monitor Entry Point (May change)
0029   0000             IO_Y3:		.EQU	$78
0030   0000             
0031   0000             
0032   0000             MPCL_ROM:	.EQU	$IO_Y3+$04	; ROM CONTROL PORT, SHOULD ONLY BE CHANGED WHILE
0033   0000             					; IN UPPER MEMORY PAGE $8000-$FFFF OR LIKELY
0034   0000             					; LOSS OF CPU MEMORY CONTEXT.
0035   0000             
0036   0000             
0037   0000             ;*******************************************************************
0038   0000             ;*	START AFTER RESET
0039   0000             ;*	Function	: ready system, load monitor into RAM and start
0040   0000             ;*******************************************************************
0041   0000             
0042   0000             	.ORG	$0000
0043   0000             
0044   0000 F3          	DI			; Disable interrupt
0045   0001 31 FF FF    	LD	SP,RAMTOP	; Set stack pointer to top off ram
0046   0004 ED 56       	IM	1		; Set interrupt mode 1
0047   0006             
0048   0006 21 00 01    	LD	HL,ROMSTART_MON	; where in rom Monitor is stored (first byte)
0049   0009 11 00 F8            LD	DE,RAMTARG_MON	; where in ram to move Monitor to (first byte)
0050   000C 01 00 08    	LD	BC,MOVSIZ_MON	; number of bytes to move from ROM to RAM
0051   000F ED B0       	LDIR			; Perform Block Copy of Monitor to Upper RAM page
0052   0011             
0053   0011 21 00 09    	LD	HL,ROMSTART_CPM	; where in rom CP/M is stored (first byte)
0054   0014 11 00 D4            LD	DE,RAMTARG_CPM	; where in ram to move Monitor to (first byte)
0055   0017 01 00 21    	LD	BC,MOVSIZ_CPM	; number of bytes to move from ROM to RAM
0056   001A ED B0       	LDIR			; Perform Block Copy of CP/M to Upper RAM page
0057   001C             
0058   001C FB          	EI			; enable interrupts (access to Monitor while CP/M running)
0059   001D             
0060   001D C3 00 F8    	JP	$MONSTART	; jump to Start of Monitor
0061   0020             
0062   0020             
0063   0020             ;************************************************************************
0064   0020             ;*	MASKABLE INTERRUPT-PROGRAM
0065   0020             ;*	Function	:
0066   0020             ;*	Input		:
0067   0020             ;*	Output		: 
0068   0020             ;*	uses		: 
0069   0020             ;*	calls		: none
0070   0020             ;*	info		:
0071   0020             ;*	tested		: 2 Feb 2007
0072   0020             ;************************************************************************
0073   0020             
0074   0038             	.ORG	$0038		; Int mode 1
0075   0038             ;	DI			; disable
0076   0038             TESTLOOP:	
0077   0038 D3 68       	OUT	($68),A
0078   003A C3 38 00    	JP	TESTLOOP
0079   003D             
0080   003D             ;	JP	$Monitor_Entry	; Go to Monitor
0081   003D             ;	EI			; enable again
0082   003D ED 4D       	RETI			; return from interrupt
0083   003F             
0084   003F             
0085   003F             ;************************************************************************
0086   003F             ;*	NONMASKABLE INTERRUPT-PROGRAM
0087   003F             ;*	Function	:
0088   003F             ;*	Input		:
0089   003F             ;*	Output		: none
0090   003F             ;*	uses		: 
0091   003F             ;*	calls		: none
0092   003F             ;*	info		:
0093   003F             ;*	tested		: 2 Feb 2007
0094   003F             ;************************************************************************
0095   003F             
0096   0066             	.ORG	$0066		; HERE IS THE NMI ROUTINE
0097   0066 ED 4D       	RETI
0098   0068             
0099   0068             ;******************************************************************
0100   0068             ;*	SUB-ROUTINE	: PAUSE
0101   0068             ;*	Function	: Pause in 100uS. times value in BC
0102   0068             ;*	Input		: BC reg
0103   0068             ;*	Output		: none
0104   0068             ;*	call		: NONE
0105   0068             ;*	Info		: KEA. 
0106   0068             ;*	tested		: 2 Feb 2007
0107   0068             ;******************************************************************
0108   0068             
0109   0068             PAUSE:
0110   0068 F5          	PUSH	AF
0111   0069 04          	INC	B
0112   006A 0C          	INC	C			; ADJUST THE LOOP
0113   006B 3E 13       PAUSELOOP1:	LD	A,13H		; ADJUST THE TIME 13h IS FOR 4 MHZ
0114   006D 3D          PAUSELOOP2:	DEC	A		; DEC COUNTER. 4 T-states = 1 uS.
0115   006E C2 6D 00    	JP	NZ,PAUSELOOP2		; JUMP TO PAUSELOOP2 IF A <> 0.
0116   0071 0D          	DEC	C			; DEC COUNTER
0117   0072 C2 6B 00    	JP	NZ,PAUSELOOP1		; JUMP TO PAUSELOOP1 IF C <> 0.
0118   0075             
0119   0075 10 F4       	DJNZ	PAUSELOOP1		; JUMP TO PAUSELOOP1 IF B <> 0.
0120   0077 F1          PAUSE_END:	POP	AF
0121   0078 C9          	RET
0122   0079             
0123   0079             
0124   00FF             	.ORG	$00FF
0125   00FF FF          FLAG	.db	$FF		; Fills with zeros up to FF and next program then fits in correct place
0126   0100             
0127   0100             .END
tasm: Number of errors = 0
